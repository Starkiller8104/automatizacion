# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18xSjlYum0k2ndcM1f52KaFCunTC81E2U
"""

# app.py
# ──────────────────────────────────────────────────────────────────────────────
# Streamlit app SIN archivo base, tokens en código y Excel NUEVO con indicadores.
# Incluye: Banxico (SIE), INEGI (UMA), FRED (Fed Funds + US CPI YoY) y hoja "Gráficos".
# ──────────────────────────────────────────────────────────────────────────────

import io
from datetime import datetime, timedelta, date
import pytz
import requests
from requests.adapters import HTTPAdapter, Retry
import streamlit as st
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis

# =========================
#  TOKENS (repo privado)
# =========================
BANXICO_TOKEN = "TU_TOKEN_BANXICO"
INEGI_TOKEN   = "TU_TOKEN_INEGI"
FRED_TOKEN    = "TU_TOKEN_FRED"

TZ_MX = pytz.timezone("America/Mexico_City")

# =========================
#  SERIES SIE DE BANXICO
# =========================
# Ajusta si usas otros IDs.
SIE_SERIES = {
    "USD_FIX":   "SF43718",   # Tipo de cambio FIX
    "EUR_FIX":   "SF46410",   # Euro
    "JPY_FIX":   "SF46406",   # Yen
    "TIIE_28":   "SF60653",   # TIIE 28 días
    "CETES_28":  "SF43936",   # CETES 28 días
    "UDIS":      "SP68257",   # UDIS
    # Si conoces la serie exacta de inflación MX YoY, colócala aquí.
    "MX_INFL_YOY": ""
}

# =========================
#  HTTP con reintentos
# =========================
def http_session(timeout=15):
    s = requests.Session()
    retries = Retry(
        total=3,
        backoff_factor=0.8,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=frozenset(["GET", "POST"])
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.request_timeout = timeout
    return s

def now_ts():
    return datetime.now(TZ_MX).strftime("%Y-%m-%d %H:%M:%S")

def today_cdmx():
    return datetime.now(TZ_MX).date()

def try_float(x):
    try:
        return float(str(x).replace(",", ""))
    except:
        return None

def is_empty(x: str) -> bool:
    return (x is None) or (str(x).strip() == "")

# =========================
#  BANXICO SIE (último dato)
# =========================
@st.cache_data(ttl=60*30)
def sie_opportuno(series_id, banxico_token):
    url = f"https://www.banxico.org.mx/SieAPIRest/service/v1/series/{series_id}/datos/oportuno"
    headers = {"Bmx-Token": banxico_token}
    s = http_session()
    r = s.get(url, headers=headers, timeout=s.request_timeout)
    r.raise_for_status()
    return r.json()

def sie_latest(series_id):
    if is_empty(series_id):
        return None, None
    try:
        data = sie_opportuno(series_id, BANXICO_TOKEN)
        serie = data["bmx"]["series"][0]["datos"]
        if not serie:
            return None, None
        last = serie[-1]
        return last["fecha"], try_float(last["dato"])
    except:
        return None, None

# =========================
#  BANXICO SIE (histórico)
# =========================
@st.cache_data(ttl=60*30)
def sie_range(series_id: str, start_iso: str, end_iso: str):
    """
    Devuelve lista de dicts [{'fecha': 'YYYY-MM-DD', 'dato': 'x'}, ...]
    usando el endpoint de rango de fechas.
    """
    url = f"https://www.banxico.org.mx/SieAPIRest/service/v1/series/{series_id}/datos/{start_iso}/{end_iso}"
    headers = {"Bmx-Token": BANXICO_TOKEN}
    s = http_session(timeout=20)
    r = s.get(url, headers=headers, timeout=s.request_timeout)
    r.raise_for_status()
    j = r.json()
    series = j.get("bmx", {}).get("series", [])
    if not series:
        return []
    return series[0].get("datos", []) or []

def sie_last_n(series_id: str, n: int = 12):
    """
    Últimos n datos (fecha_str, valor_float). Si no alcanza, devuelve lo disponible.
    """
    end = today_cdmx()
    start = end - timedelta(days=365*2)  # rango suficientemente amplio
    obs = sie_range(series_id, start.isoformat(), end.isoformat())
    vals = []
    for o in obs:
        f = o.get("fecha")
        v = try_float(o.get("dato"))
        if f and (v is not None):
            vals.append((f, v))
    if not vals:
        return []
    return vals[-n:]

# =========================
#  INEGI (UMA)
# =========================
@st.cache_data(ttl=60*60)
def get_uma(inegi_token: str):
    # Serie 620706, 620707, 620708: UMA diaria, mensual, anual
    url = (
        "https://www.inegi.org.mx/app/api/indicadores/desarrolladores/jsonxml/"
        "INDICATOR/620706,620707,620708/es/0700/false/BISE/2.0/"
        f"{inegi_token}?type=json"
    )
    s = http_session(timeout=20)
    r = s.get(url, timeout=s.request_timeout)
    r.raise_for_status()
    data = r.json()
    series = data["Series"]

    diaria_obs  = series[0]["OBSERVATIONS"][-1]
    mensual_obs = series[1]["OBSERVATIONS"][-1]
    anual_obs   = series[2]["OBSERVATIONS"][-1]

    return {
        "fecha":   diaria_obs["TIME_PERIOD"],
        "diaria":  try_float(diaria_obs["OBS_VALUE"]),
        "mensual": try_float(mensual_obs["OBS_VALUE"]),
        "anual":   try_float(anual_obs["OBS_VALUE"])
    }

# =========================
#  FRED (Fed Funds + CPI YoY)
# =========================
@st.cache_data(ttl=60*30)
def fred_observations(series_id: str, start_date: str = None, end_date: str = None):
    base = "https://api.stlouisfed.org/fred/series/observations"
    params = {
        "series_id": series_id,
        "api_key": FRED_TOKEN,
        "file_type": "json",
    }
    if start_date:
        params["observation_start"] = start_date
    if end_date:
        params["observation_end"] = end_date
    s = http_session(timeout=20)
    r = s.get(base, params=params, timeout=s.request_timeout)
    r.raise_for_status()
    j = r.json()
    return j.get("observations", [])

def fred_latest_value(series_id: str):
    end = datetime.utcnow().date()
    start = (end - timedelta(days=3*365)).isoformat()
    obs = fred_observations(series_id, start_date=start, end_date=end.isoformat())
    obs = [o for o in obs if o.get("value") not in (".", None)]
    if not obs:
        return None, None
    last = obs[-1]
    return last["date"], try_float(last["value"])

def fred_last_n(series_id: str, n: int = 12):
    """
    Últimos n datos de FRED (fecha_str, valor_float).
    """
    end = datetime.utcnow().date()
    start = (end - timedelta(days=5*365)).isoformat()
    obs = fred_observations(series_id, start_date=start, end_date=end.isoformat())
    out = []
    for o in obs:
        v = o.get("value")
        if v not in (".", None):
            out.append((o.get("date"), try_float(v)))
    if not out:
        return []
    return out[-n:]

def fred_cpi_yoy_series(n: int = 12):
    """
    Serie de YoY % para CPIAUCSL: últimos n meses (fecha, yoy).
    """
    end = datetime.utcnow().date()
    start = (end - timedelta(days=6*365)).isoformat()
    obs = fred_observations("CPIAUCSL", start_date=start, end_date=end.isoformat())
    obs = [(o["date"], try_float(o["value"])) for o in obs if o.get("value") not in (".", None)]
    if len(obs) < 13:
        return []
    yoy = []
    # Empezamos desde el índice 12 (t-12)
    for i in range(12, len(obs)):
        f_now, v_now = obs[i]
        f_prev, v_prev = obs[i-12]
        if v_now is None or v_prev in (None, 0):
            continue
        yoy.append((f_now, (v_now / v_prev - 1.0) * 100.0))
    if not yoy:
        return []
    return yoy[-n:]

def get_us_from_fred():
    fed_date, fed_val = fred_latest_value("FEDFUNDS")
    yoy_series = fred_cpi_yoy_series(n=1)
    cpi_date, cpi_yoy = (yoy_series[-1] if yoy_series else (None, None))
    # Fallbacks
    if fed_val is None:
        fed_date, fed_val = str(today_cdmx()), 5.50
    if cpi_yoy is None:
        cpi_date, cpi_yoy = str(today_cdmx()), 3.20
    return {"FEDFUNDS": (fed_date, fed_val), "US_CPI_YoY": (cpi_date, cpi_yoy)}

# =========================
#  Consolidadores (último dato)
# =========================
def get_fx_from_sie():
    usd = sie_latest(SIE_SERIES["USD_FIX"]) or (None, None)
    eur = sie_latest(SIE_SERIES["EUR_FIX"]) or (None, None)
    jpy = sie_latest(SIE_SERIES["JPY_FIX"]) or (None, None)
    if usd == (None, None): usd = (str(today_cdmx()), 18.50)
    if eur == (None, None): eur = (str(today_cdmx()), 20.10)
    if jpy == (None, None): jpy = (str(today_cdmx()), 0.128)
    return {"USD": usd, "EUR": eur, "JPY": jpy}

def get_tiie_cetes_from_sie():
    tiie = sie_latest(SIE_SERIES["TIIE_28"]) or (None, None)
    cetes = sie_latest(SIE_SERIES["CETES_28"]) or (None, None)
    if tiie == (None, None): tiie = (str(today_cdmx()), 11.30)
    if cetes == (None, None): cetes = (str(today_cdmx()), 10.75)
    return {"TIIE_28": tiie, "CETES_28": cetes}

def get_udis_from_sie():
    udis = sie_latest(SIE_SERIES["UDIS"]) or (None, None)
    if udis == (None, None): udis = (str(today_cdmx()), 8.15)
    return udis

def get_inflacion_mx_yoy_from_sie():
    infl = sie_latest(SIE_SERIES["MX_INFL_YOY"]) or (None, None)
    if infl == (None, None): infl = (str(today_cdmx()), 4.47)
    return infl

# =========================
#  EXCEL helpers
# =========================
def set_cell(ws, cell, value, bold=False, numfmt=None, wrap=False):
    ws[cell].value = value
    if bold:
        ws[cell].font = Font(bold=True)
    if numfmt:
        ws[cell].number_format = numfmt
    if wrap:
        ws[cell].alignment = Alignment(wrap_text=True, vertical="top")

def autosize(ws, min_col=1, max_col=10):
    for col in range(min_col, max_col+1):
        letter = get_column_letter(col)
        max_len = 0
        for cell in ws[letter]:
            v = cell.value
            if v is None:
                continue
            max_len = max(max_len, len(str(v)))
        ws.column_dimensions[letter].width = min(max_len + 2, 60)

# -------------------------
# Hoja "Gráficos"
# -------------------------
def write_series_table(ws, start_row: int, start_col: int, title: str, series):
    """
    Escribe una tabla (Fecha, Valor) y retorna (row0, col0, row1, col1) del rango de datos.
    'series' debe ser lista de tuplas (fecha_str, valor_float).
    """
    r = start_row
    c = start_col
    # Título
    ws.cell(row=r, column=c, value=title).font = Font(bold=True)
    r += 1
    ws.cell(row=r, column=c, value="Fecha").font = Font(bold=True)
    ws.cell(row=r, column=c+1, value="Valor").font = Font(bold=True)
    r += 1
    for (f, v) in series:
        ws.cell(row=r, column=c, value=f)
        ws.cell(row=r, column=c+1, value=v)
        r += 1
    # Rango datos (sin encabezado)
    data_start_row = start_row + 2
    data_end_row = r - 1
    return (data_start_row, c, data_end_row, c+1)

def add_line_chart(ws, title: str, data_range, cat_is_dates=True, place_at=("H", 2)):
    """
    Inserta un LineChart usando el rango de datos:
      data_range = (row0, col0, row1, col1) donde col1 es la columna de valores y col0 la de fechas.
    place_at = ("ColLetra", fila_superior) para colocar el chart.
    """
    (r0, c0, r1, c1) = data_range
    chart = LineChart()
    chart.title = title
    chart.style = 2
    chart.y_axis.title = "Valor"
    if cat_is_dates:
        chart.x_axis = DateAxis()
        chart.x_axis.number_format = "yyyy-mm-dd"
        chart.x_axis.title = "Fecha"

    data = Reference(ws, min_col=c1, min_row=r0, max_col=c1, max_row=r1)
    cats = Reference(ws, min_col=c0, min_row=r0, max_row=r1)
    chart.add_data(data, titles_from_data=False)
    chart.set_categories(cats)

    # Colocar el gráfico
    anchor_col, anchor_row = place_at
    ws.add_chart(chart, f"{anchor_col}{anchor_row}")

def crear_excel(datos: dict, graficos_data: dict | None = None) -> bytes:
    wb = Workbook()
    ws = wb.active
    ws.title = "Indicadores"

    set_cell(ws, "A1", "Actualización de Indicadores", bold=True)
    set_cell(ws, "A2", f"Generado: {now_ts()} (CDMX)")

    # Tabla consolidada
    rows = [
        ("Indicador", "Fecha", "Valor", "Unidad / Nota"),
        ("USD/MXN",           datos["fx"]["USD"][0],              datos["fx"]["USD"][1],              ""),
        ("EUR/MXN",           datos["fx"]["EUR"][0],              datos["fx"]["EUR"][1],              ""),
        ("JPY/MXN",           datos["fx"]["JPY"][0],              datos["fx"]["JPY"][1],              ""),
        ("TIIE 28d (%)",      datos["tiie_cetes"]["TIIE_28"][0],  datos["tiie_cetes"]["TIIE_28"][1],  ""),
        ("CETES 28d (%)",     datos["tiie_cetes"]["CETES_28"][0], datos["tiie_cetes"]["CETES_28"][1], ""),
        ("UDIS",              datos["udis"][0],                   datos["udis"][1],                   ""),
        ("Inflación MX YoY (%)", datos["infl_mx"][0],             datos["infl_mx"][1],                ""),
        ("Fed Funds (%)",     datos["us"]["FEDFUNDS"][0],         datos["us"]["FEDFUNDS"][1],         ""),
        ("Inflación EUA YoY (%)", datos["us"]["US_CPI_YoY"][0],   datos["us"]["US_CPI_YoY"][1],       ""),
        ("UMA diaria",        datos["uma"]["fecha"],              datos["uma"]["diaria"],             ""),
        ("UMA mensual",       datos["uma"]["fecha"],              datos["uma"]["mensual"],            ""),
        ("UMA anual",         datos["uma"]["fecha"],              datos["uma"]["anual"],              ""),
    ]

    start_row = 5
    for j, v in enumerate(rows[0], start=1):
        cell = ws.cell(row=start_row, column=j, value=v)
        cell.font = Font(bold=True)
    for i, r in enumerate(rows[1:], start=start_row + 1):
        for j, v in enumerate(r, start=1):
            ws.cell(row=i, column=j, value=v)

    autosize(ws, 1, 6)

    # Hoja "Noticias"
    ws2 = wb.create_sheet("Noticias")
    set_cell(ws2, "A1", "Eventos relevantes (próximos 5 meses)", bold=True)
    set_cell(ws2, "A3", "Notas del analista:", bold=True)
    set_cell(ws2, "A5",
             "- Banxico / Fed (decisiones y forward guidance)\n"
             "- Inflación y empleo (MX/EUA)\n"
             "- Precios de materias primas (resina, fibra, combustibles)\n"
             "- Tipo de cambio y volatilidad regional",
             wrap=True)
    autosize(ws2, 1, 4)

    # Hoja "Gráficos"
    if graficos_data:
        ws3 = wb.create_sheet("Gráficos")
        set_cell(ws3, "A1", "Series históricas (últimos 12 datos)", bold=True)

        # 1) USD/MXN
        usd_range = write_series_table(ws3, start_row=3, start_col=1, title="USD/MXN (FIX)", series=graficos_data["USD_LAST12"])
        add_line_chart(ws3, "USD/MXN - Últimos 12", usd_range, place_at=("H", 2))

        # 2) TIIE 28 días
        tiie_range = write_series_table(ws3, start_row=3, start_col=4, title="TIIE 28d (%)", series=graficos_data["TIIE_LAST12"])
        add_line_chart(ws3, "TIIE 28d - Últimos 12", tiie_range, place_at=("H", 18))

        # 3) Fed Funds
        fed_range = write_series_table(ws3, start_row=22, start_col=1, title="Fed Funds (%)", series=graficos_data["FEDFUNDS_LAST12"])
        add_line_chart(ws3, "Fed Funds - Últimos 12", fed_range, place_at=("H", 34))

        # 4) Inflación EUA YoY
        cpiyoy_range = write_series_table(ws3, start_row=22, start_col=4, title="Inflación EUA YoY (%)", series=graficos_data["US_CPI_YOY_LAST12"])
        add_line_chart(ws3, "Inflación EUA YoY - Últimos 12", cpiyoy_range, place_at=("H", 50))

        autosize(ws3, 1, 12)

    bio = io.BytesIO()
    wb.save(bio)
    return bio.getvalue()

# =========================
#  STREAMLIT UI
# =========================
st.set_page_config(page_title="Indicadores Económicos", page_icon="📈", layout="centered")
st.title("📈 Actualización de Indicadores (Automática)")
st.caption("Genera un Excel nuevo con datos de Banxico, INEGI y FRED. Incluye hoja de Gráficos. No requiere archivo base.")

with st.expander("Opciones (activa/desactiva)"):
    do_fx = st.toggle("Tipos de cambio (USD, EUR, JPY)", value=True)
    do_tiie = st.toggle("TIIE y CETES (28d)", value=True)
    do_udis = st.toggle("UDIS", value=True)
    do_uma = st.toggle("UMA (diaria, mensual, anual)", value=True)
    do_mx_infl = st.toggle("Inflación México (YoY)", value=True)
    do_us = st.toggle("EUA: Fed Funds / Inflación YoY (FRED)", value=True)
    do_charts = st.toggle("Incluir hoja de Gráficos (últimos 12 datos)", value=True)

if st.button("Generar Excel nuevo"):
    fx = get_fx_from_sie() if do_fx else {"USD": (None, None), "EUR": (None, None), "JPY": (None, None)}
    tiie_cetes = get_tiie_cetes_from_sie() if do_tiie else {"TIIE_28": (None, None), "CETES_28": (None, None)}
    udis = get_udis_from_sie() if do_udis else (None, None)
    uma = get_uma(INEGI_TOKEN) if do_uma else {"fecha": None, "diaria": None, "mensual": None, "anual": None}
    infl_mx = get_inflacion_mx_yoy_from_sie() if do_mx_infl else (None, None)
    us = get_us_from_fred() if do_us else {"FEDFUNDS": (None, None), "US_CPI_YoY": (None, None)}

    datos = {"fx": fx, "tiie_cetes": tiie_cetes, "udis": udis, "uma": uma, "infl_mx": infl_mx, "us": us}

    # Históricos para gráficos
    graficos_data = None
    if do_charts:
        try:
            usd_last12 = sie_last_n(SIE_SERIES["USD_FIX"], n=12) if do_fx else []
            tiie_last12 = sie_last_n(SIE_SERIES["TIIE_28"], n=12) if do_tiie else []
            fed_last12 = fred_last_n("FEDFUNDS", n=12) if do_us else []
            cpiyoy_last12 = fred_cpi_yoy_series(n=12) if do_us else []
            # Fallbacks suaves si alguna lista vino vacía
            if not usd_last12:     usd_last12 = [(str(today_cdmx()), 18.5)]
            if not tiie_last12:    tiie_last12 = [(str(today_cdmx()), 11.3)]
            if not fed_last12:     fed_last12 = [(str(today_cdmx()), 5.5)]
            if not cpiyoy_last12:  cpiyoy_last12 = [(str(today_cdmx()), 3.2)]
            graficos_data = {
                "USD_LAST12": usd_last12,
                "TIIE_LAST12": tiie_last12,
                "FEDFUNDS_LAST12": fed_last12,
                "US_CPI_YOY_LAST12": cpiyoy_last12,
            }
        except Exception as e:
            st.warning(f"No se pudieron preparar todas las series de gráficos: {e}")
            graficos_data = None

    try:
        xlsx = crear_excel(datos, graficos_data=graficos_data)
        st.success("¡Listo! Archivo generado correctamente.")
        st.download_button(
            "Descargar Excel de Indicadores",
            data=xlsx,
            file_name=f"indicadores_{today_cdmx()}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        st.error(f"Ocurrió un error al generar el Excel: {e}")

st.info(
    "Sugerencia: si haces público el repo, mueve BANXICO_TOKEN / INEGI_TOKEN / FRED_TOKEN a `st.secrets`.\n"
    "Si conoces el ID SIE exacto de Inflación MX YoY, colócalo en `SIE_SERIES['MX_INFL_YOY']`."
)