# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18xSjlYum0k2ndcM1f52KaFCunTC81E2U
"""

# app.py
# ──────────────────────────────────────────────────────────────────────────────
# Indicadores (últimos 6 días con tu layout) + Noticias + (opcional) Gráficos y Datos crudos.
# Fechas "naive" (sin tz) para Excel, gráficos seguros y UMA robusto con diagnóstico.
# Tokens incrustados: Banxico/INEGI.
# ──────────────────────────────────────────────────────────────────────────────

import io
import re
import time
import html
from datetime import datetime, timedelta
from email.utils import parsedate_to_datetime
import pytz
import requests
from requests.adapters import HTTPAdapter, Retry
import streamlit as st
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter
from openpyxl.chart import LineChart, Reference
from openpyxl.chart.axis import DateAxis

# =========================
#  TOKENS
# =========================
BANXICO_TOKEN = "677aaedf11d11712aa2ccf73da4d77b6b785474eaeb2e092f6bad31b29de6609"
INEGI_TOKEN   = "0146a9ed-b70f-4ea2-8781-744b900c19d1"   # (nuevo)
FRED_TOKEN    = ""  # opcional

TZ_MX = pytz.timezone("America/Mexico_City")

# =========================
#  SERIES SIE
# =========================
SIE_SERIES = {
    "USD_FIX":   "SF43718",
    "EUR_FIX":   "SF46410",
    "JPY_FIX":   "SF46406",

    # TIIE / CETES (IDs seguros que ya veníamos usando)
    "TIIE_OBJ":  "",          # pon el id real si lo tienes
    "TIIE_28":   "SF60653",   # usamos este porque te ha funcionado
    "TIIE_91":   "",          # id pendiente
    "TIIE_182":  "",          # id pendiente

    "CETES_28":  "SF43936",
    "CETES_91":  "",          # id pendiente
    "CETES_182": "",          # id pendiente
    "CETES_364": "",          # id pendiente

    "UDIS":      "SP68257",
}

# =========================
#  Utilidades
# =========================
def http_session(timeout=15):
    s = requests.Session()
    retries = Retry(total=3, backoff_factor=0.8,
                    status_forcelist=[429, 500, 502, 503, 504],
                    allowed_methods=frozenset(["GET", "POST"]))
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.request_timeout = timeout
    return s

def now_ts():
    return datetime.now(TZ_MX).strftime("%Y-%m-%d %H:%M:%S")

def today_cdmx():
    return datetime.now(TZ_MX).date()

def try_float(x):
    try:
        return float(str(x).replace(",", ""))
    except:
        return None

def parse_any_date(s: str):
    """Devuelve datetime *naive* (sin tz) para Excel."""
    if not s:
        return None
    s = str(s)
    for fmt in ("%Y-%m-%d", "%d/%m/%Y"):
        try:
            return datetime.strptime(s, fmt)
        except:
            pass
    try:
        dt = parsedate_to_datetime(s)
        if dt.tzinfo is not None:
            dt = dt.astimezone(TZ_MX).replace(tzinfo=None)
        return dt
    except:
        return None

def ensure_naive(dt: datetime | None):
    if dt is None: return None
    if dt.tzinfo is not None:
        return dt.astimezone(TZ_MX).replace(tzinfo=None)
    return dt

def _check_tokens():
    missing = []
    if not BANXICO_TOKEN.strip(): missing.append("BANXICO_TOKEN")
    if not INEGI_TOKEN.strip():   missing.append("INEGI_TOKEN")
    if missing:
        st.error("Faltan tokens: " + ", ".join(missing))
        st.stop()

# =========================
#  Banxico SIE
# =========================
@st.cache_data(ttl=60*30)
def sie_opportuno(series_id):
    url = f"https://www.banxico.org.mx/SieAPIRest/service/v1/series/{series_id}/datos/oportuno"
    headers = {"Bmx-Token": BANXICO_TOKEN}
    r = http_session().get(url, headers=headers, timeout=15)
    r.raise_for_status()
    return r.json()

def sie_latest(series_id):
    try:
        data = sie_opportuno(series_id)
        serie = data["bmx"]["series"][0]["datos"]
        if not serie: return None, None
        last = serie[-1]
        return last["fecha"], try_float(last["dato"])
    except:
        return None, None

@st.cache_data(ttl=60*30)
def sie_range(series_id: str, start_iso: str, end_iso: str):
    url = f"https://www.banxico.org.mx/SieAPIRest/service/v1/series/{series_id}/datos/{start_iso}/{end_iso}"
    headers = {"Bmx-Token": BANXICO_TOKEN}
    r = http_session(20).get(url, headers=headers, timeout=20)
    r.raise_for_status()
    j = r.json()
    series = j.get("bmx", {}).get("series", [])
    if not series:
        return []
    return series[0].get("datos", []) or []

def sie_last_n(series_id: str, n: int = 6):
    end = today_cdmx()
    start = end - timedelta(days=2*365)
    obs = sie_range(series_id, start.isoformat(), end.isoformat())
    vals = []
    for o in obs:
        f = o.get("fecha")
        v = try_float(o.get("dato"))
        if f and (v is not None):
            vals.append((f, v))
    if not vals:
        return []
    vals.sort(key=lambda x: parse_any_date(x[0]) or datetime.utcnow())
    return vals[-n:]

def rolling_movex_for_last6(window:int=20):
    end = today_cdmx()
    start = end - timedelta(days=365)
    obs = sie_range(SIE_SERIES["USD_FIX"], start.isoformat(), end.isoformat())
    series = [try_float(o.get("dato")) for o in obs if try_float(o.get("dato")) is not None]
    if not series:
        return [None]*6
    out = []
    for k in range(6, 0, -1):
        idx = len(series) - k
        sub = series[max(0, idx-window+1): idx+1]
        out.append(sum(sub)/len(sub) if sub else None)
    return out

# =========================
#  INEGI UMA – robusto (con diagnóstico)
# =========================
@st.cache_data(ttl=60*60)
def get_uma(inegi_token: str, verbose: bool = False):
    """
    UMA nacional:
      620706 diaria, 620707 mensual, 620708 anual
    Retorna: {'fecha','diaria','mensual','anual','_status','_source'} (+ '_raw' si verbose)
    """
    base = "https://www.inegi.org.mx/app/api/indicadores/desarrolladores/jsonxml/INDICATOR"
    ids = "620706,620707,620708"
    urls = [
        f"{base}/{ids}/es/00/true/BISE/2.0/{inegi_token}?type=json",
        f"{base}/{ids}/es/00/true/BIE/2.0/{inegi_token}?type=json",  # fallback
    ]

    def _num(x):
        try:
            return float(str(x).replace(",", ""))
        except:
            return None

    s = http_session(timeout=20)
    last_err = None
    for url in urls:
        try:
            r = s.get(url, timeout=s.request_timeout)
            status = r.status_code
            if status != 200:
                last_err = f"HTTP {status}"
                continue
            data = r.json()
            series = data.get("Series") or data.get("series") or []
            if not series:
                last_err = "Sin 'Series'"
                continue

            def last_obs(s):
                obs = s.get("OBSERVATIONS") or s.get("observations") or []
                return obs[-1] if obs else None

            d_obs = last_obs(series[0])
            m_obs = last_obs(series[1]) if len(series) > 1 else None
            a_obs = last_obs(series[2]) if len(series) > 2 else None

            def get_v(o):
                if not o: return None
                return _num(o.get("OBS_VALUE") or o.get("OBS_VALUE_STR") or o.get("value"))

            fecha   = (d_obs or m_obs or a_obs or {}).get("TIME_PERIOD") or str(today_cdmx())
            diaria  = get_v(d_obs)
            mensual = get_v(m_obs)
            anual   = get_v(a_obs)

            if diaria is not None:
                if mensual is None: mensual = diaria * 30.4
                if anual   is None: anual   = mensual * 12

            out = {"fecha": fecha, "diaria": diaria, "mensual": mensual, "anual": anual,
                   "_status": "OK", "_source": url}
            if verbose:
                out["_raw"] = data
            return out

        except Exception as e:
            last_err = f"{type(e).__name__}"

    return {"fecha": str(today_cdmx()), "diaria": None, "mensual": None, "anual": None,
            "_status": f"Fallo ({last_err})", "_source": urls[-1]}

# =========================
#  FRED (opcional, para gráficos)
# =========================
@st.cache_data(ttl=60*30)
def fred_observations(series_id: str, start_date: str = None, end_date: str = None):
    base = "https://api.stlouisfed.org/fred/series/observations"
    params = {"series_id": series_id, "file_type": "json"}
    if FRED_TOKEN.strip(): params["api_key"] = FRED_TOKEN.strip()
    if start_date: params["observation_start"] = start_date
    if end_date:   params["observation_end"]   = end_date
    r = http_session(20).get(base, params=params, timeout=20)
    r.raise_for_status()
    return r.json().get("observations", [])

def fred_last_n(series_id: str, n: int = 12):
    try:
        end = datetime.utcnow().date()
        start = (end - timedelta(days=5*365)).isoformat()
        obs = fred_observations(series_id, start_date=start, end_date=end.isoformat())
        out = [(o["date"], try_float(o["value"])) for o in obs if o.get("value") not in (".", None)]
        return out[-n:] if out else []
    except:
        return []

def fred_cpi_yoy_series(n: int = 12):
    try:
        end = datetime.utcnow().date()
        start = (end - timedelta(days=6*365)).isoformat()
        obs = fred_observations("CPIAUCSL", start_date=start, end_date=end.isoformat())
        obs = [(o["date"], try_float(o["value"])) for o in obs if o.get("value") not in (".", None)]
        if len(obs) < 13: return []
        yoy = []
        for i in range(12, len(obs)):
            f_now, v_now = obs[i]
            f_prev, v_prev = obs[i-12]
            if v_now is None or not v_prev: continue
            yoy.append((f_now, (v_now / v_prev - 1) * 100.0))
        return yoy[-n:] if yoy else []
    except:
        return []

# =========================
#  Noticias (RSS) con fechas naive
# =========================
RSS_FEEDS = [
    "https://feeds.reuters.com/reuters/businessNews",
    "https://feeds.reuters.com/reuters/marketsNews",
    "https://finance.yahoo.com/news/rssindex",
]

def _strip_html(s: str) -> str:
    if not s:
        return ""
    s = html.unescape(s)
    s = re.sub(r"<[^>]+>", "", s)
    return s.replace("\xa0", " ").strip()

@st.cache_data(ttl=60*15)
def fetch_financial_news(limit_per_feed=8, total_limit=20):
    items = []
    s = http_session(15)
    for url in RSS_FEEDS:
        try:
            r = s.get(url, timeout=s.request_timeout)
            r.raise_for_status()
            from xml.etree import ElementTree as ET
            root = ET.fromstring(r.content)
            for item in root.findall(".//item")[:limit_per_feed]:
                title = _strip_html(item.findtext("title") or "")
                link  = (item.findtext("link") or "").strip()
                desc  = _strip_html(item.findtext("description") or "")
                pub   = item.findtext("pubDate") or ""
                dt    = parse_any_date(pub) or datetime.utcnow()
                dt    = ensure_naive(dt)
                source = re.sub(r"^https?://(www\.)?([^/]+)/?.*$", r"\2", link) if link else "rss"
                items.append({"dt": dt, "title": title, "link": link, "summary": desc, "source": source})
        except Exception:
            continue
    items.sort(key=lambda x: x["dt"], reverse=True)
    seen = set(); out = []
    for it in items:
        key = it["title"][:120]
        if key in seen: 
            continue
        seen.add(key); out.append(it)
        if len(out) >= total_limit: break
    return out

# =========================
#  Excel helpers y layout
# =========================
def set_cell(ws, cell, value, bold=False):
    ws[cell].value = value
    if bold: ws[cell].font = Font(bold=True)

def autosize(ws, min_col=1, max_col=8):
    for col in range(min_col, max_col+1):
        letter = get_column_letter(col)
        max_len = 0
        for cell in ws[letter]:
            if cell.value is None: continue
            max_len = max(max_len, len(str(cell.value)))
        ws.column_dimensions[letter].width = min(max_len + 2, 60)

def write_row_values(ws, row_idx: int, values6):
    for j, v in enumerate(values6, start=2):  # columnas B..G
        ws.cell(row=row_idx, column=j, value=v)

def crear_hoja_indicadores_layout(valores: dict, movex6, compra6, venta6, fechas6_dt):
    wb = Workbook()
    ws = wb.active
    ws.title = "Indicadores"

    # Cabecera con fechas reales
    set_cell(ws, "A2", "Fecha:", bold=True)
    headers_cells = ["B2","C2","D2","E2","F2","G2"]
    for cell_ref, d in zip(headers_cells, fechas6_dt):
        if d is None:
            ws[cell_ref] = ""
        else:
            ws[cell_ref] = d
            ws[cell_ref].number_format = "yyyy-mm-dd"

    # Secciones / etiquetas
    set_cell(ws, "A4", "TIPOS DE CAMBIO:", bold=True)
    set_cell(ws, "A6", "DÓLAR AMERICANO.", bold=True)
    set_cell(ws, "A7", "Dólar/Pesos:")
    set_cell(ws, "A8", "MOVEX:")
    set_cell(ws, "A9", "Compra:")
    set_cell(ws, "A10","Venta:")

    set_cell(ws, "A12","YEN JAPONÉS.", bold=True)
    set_cell(ws, "A13","Yen Japonés/Peso:")
    set_cell(ws, "A14","Dólar/Yen Japonés:")

    set_cell(ws, "A16","EURO.", bold=True)
    set_cell(ws, "A17","Euro/Peso:")
    set_cell(ws, "A18","Euro/Dólar:")

    set_cell(ws, "A20","UDIS:", bold=True)
    set_cell(ws, "A22","UDIS: ")

    set_cell(ws, "A24","TASAS TIIE:", bold=True)
    set_cell(ws, "A26","TIIE objetivo:")
    set_cell(ws, "A27","TIIE 28 Días:")
    set_cell(ws, "A28","TIIE 91 Días:")
    set_cell(ws, "A29","TIIE 182 Días:")

    set_cell(ws, "A31","CETES:", bold=True)
    set_cell(ws, "A33","CETES 28 Días:")
    set_cell(ws, "A34","CETES 91 Días:")
    set_cell(ws, "A35","Cetes 182 Días:")
    set_cell(ws, "A36","Cetes 364 Días:")

    set_cell(ws, "A38","UMA:", bold=True)
    set_cell(ws, "A40","Diario:")
    set_cell(ws, "A41","Mensual:")
    set_cell(ws, "A42","Anual:")

    # Valores
    write_row_values(ws, 7,  valores["usd6"])
    write_row_values(ws, 8,  movex6)
    write_row_values(ws, 9,  compra6)
    write_row_values(ws, 10, venta6)

    write_row_values(ws, 13, valores["jpy6"])
    write_row_values(ws, 14, valores["usdjpy6"])

    write_row_values(ws, 17, valores["eur6"])
    write_row_values(ws, 18, valores["eurusd6"])

    write_row_values(ws, 22, valores["udis6"])

    write_row_values(ws, 26, valores["tiie_obj6"])
    write_row_values(ws, 27, valores["tiie28_6"])
    write_row_values(ws, 28, valores["tiie91_6"])
    write_row_values(ws, 29, valores["tiie182_6"])

    write_row_values(ws, 33, valores["cetes28_6"])
    write_row_values(ws, 34, valores["cetes91_6"])
    write_row_values(ws, 35, valores["cetes182_6"])
    write_row_values(ws, 36, valores["cetes364_6"])

    write_row_values(ws, 40, valores["uma_diaria6"])
    write_row_values(ws, 41, valores["uma_mensual6"])
    write_row_values(ws, 42, valores["uma_anual6"])

    autosize(ws, 1, 7)
    return wb

def add_news_sheet(wb, news_items):
    ws2 = wb.create_sheet("Noticias")
    set_cell(ws2, "A1", "Resumen de noticias financieras", bold=True)
    set_cell(ws2, "A2", f"Generado: {now_ts()} (CDMX)")
    headers = ["Fecha", "Fuente", "Título", "Resumen", "Link"]
    for col, h in enumerate(headers, start=1):
        c = ws2.cell(row=4, column=col, value=h); c.font = Font(bold=True)
    r = 5
    if not news_items:
        ws2.cell(row=r, column=1, value="Sin datos")
        ws2.cell(row=r, column=3, value="No se pudieron descargar noticias (revisa conexión/red).")
        autosize(ws2, 1, 5); return
    for it in news_items:
        dt = ensure_naive(it["dt"]) or datetime.now()
        ws2.cell(row=r, column=1, value=dt); ws2.cell(row=r, column=1).number_format = "yyyy-mm-dd hh:mm"
        ws2.cell(row=r, column=2, value=it["source"])
        ws2.cell(row=r, column=3, value=it["title"])
        ws2.cell(row=r, column=4, value=(it["summary"][:400] + ("..." if len(it["summary"])>400 else "")))
        ws2.cell(row=r, column=5, value=it["link"])
        ws2.cell(row=r, column=4).alignment = Alignment(wrap_text=True, vertical="top")
        r += 1
    autosize(ws2, 1, 5)

# Gráficos + Datos crudos
def write_series_table(ws, start_row: int, start_col: int, title: str, series):
    series = [(f, v) for (f, v) in series if v is not None]
    r, c = start_row, start_col
    ws.cell(row=r, column=c, value=title).font = Font(bold=True); r += 1
    ws.cell(row=r, column=c,   value="Fecha").font = Font(bold=True)
    ws.cell(row=r, column=c+1, value="Valor").font = Font(bold=True); r += 1
    for (f, v) in series:
        dt = parse_any_date(f) or datetime.utcnow()
        ws.cell(row=r, column=c,   value=dt); ws.cell(row=r, column=c).number_format="yyyy-mm-dd"
        ws.cell(row=r, column=c+1, value=v)
        r += 1
    return (start_row+2, c, r-1, c+1)

def add_line_chart(ws, title: str, data_range, place_at=("H", 2)):
    (r0, c0, r1, c1) = data_range
    if r1 <= r0:  # necesita >=2 filas
        return
    chart = LineChart()
    chart.title = title
    chart.style = 2
    chart.y_axis.title = "Valor"
    chart.x_axis = DateAxis(); chart.x_axis.number_format = "yyyy-mm-dd"; chart.x_axis.title = "Fecha"
    data = Reference(ws, min_col=c1, min_row=r0, max_col=c1, max_row=r1)
    cats = Reference(ws, min_col=c0, min_row=r0, max_row=r1)
    chart.add_data(data, titles_from_data=False)
    chart.set_categories(cats)
    ws.add_chart(chart, f"{place_at[0]}{place_at[1]}")

def add_raw_sheet(wb, raw_data: dict):
    ws = wb.create_sheet("Datos crudos")
    ws.cell(row=1, column=1, value="Serie").font = Font(bold=True)
    ws.cell(row=1, column=2, value="Fecha").font = Font(bold=True)
    ws.cell(row=1, column=3, value="Valor").font = Font(bold=True)
    r = 2
    for name, serie in raw_data.items():
        for (f, v) in serie:
            if v is None: continue
            dt = parse_any_date(f) or datetime.utcnow()
            ws.cell(row=r, column=1, value=name)
            ws.cell(row=r, column=2, value=dt); ws.cell(row=r, column=2).number_format="yyyy-mm-dd"
            ws.cell(row=r, column=3, value=v)
            r += 1
    autosize(ws, 1, 4)

# =========================
#  Sidebar estado y diagnóstico UMA
# =========================
def _probe(fn, ok_pred):
    t0 = time.perf_counter()
    status, msg = "err", ""
    try:
        res = fn()
        status = ok_pred(res)
        msg = "OK" if status=="ok" else ("Parcial" if status=="warn" else "Sin datos")
    except Exception as e:
        status, msg = "err", f"Excepción: {type(e).__name__}"
    ms = int((time.perf_counter()-t0)*1000)
    return status, msg, ms

def _render_sidebar_status():
    st.sidebar.header("🔎 Estado de fuentes")
    st.sidebar.caption(f"Última verificación: {now_ts()}")
    b_status, b_msg, b_ms = _probe(lambda: sie_latest(SIE_SERIES["USD_FIX"]),
                                   lambda res: "ok" if isinstance(res, tuple) and res[0] and (res[1] is not None) else "err")
    i_status, i_msg, i_ms = _probe(lambda: get_uma(INEGI_TOKEN),
                                   lambda res: "ok" if isinstance(res, dict) and (res.get("diaria") is not None) else ("warn" if isinstance(res, dict) else "err"))
    if not FRED_TOKEN.strip():
        f_status, f_msg, f_ms = ("warn", "Sin token (fallback)", 0)
    else:
        f_status, f_msg, f_ms = ("ok", "OK", 0)
    def badge(status, label, msg, ms):
        dot = "🟢" if status=="ok" else ("🟡" if status=="warn" else "🔴")
        st.sidebar.write(f"{dot} **{label}** — {msg} · {ms} ms")
    badge(b_status, "Banxico (SIE)", b_msg, b_ms)
    badge(i_status, "INEGI (UMA)", i_msg, i_ms)
    badge(f_status, "FRED (USA)", f_msg, f_ms)
    st.sidebar.divider()
    with st.sidebar.expander("Diagnóstico UMA"):
        col1, col2 = st.columns(2)
        if col1.button("Probar INEGI ahora"):
            res = get_uma(INEGI_TOKEN, verbose=True)
            st.write("Estado:", res.get("_status"), "— Fuente:", res.get("_source"))
            st.json(res)
        if col2.button("Limpiar caché UMA"):
            get_uma.clear()
            st.success("Caché de UMA limpiada. Vuelve a generar el Excel.")

# =========================
#  UI
# =========================
st.set_page_config(page_title="Indicadores Económicos", page_icon="📈", layout="centered")
st.title("📈 Indicadores (últimos 6 días) + Noticias")
st.caption("Excel con tu layout + hoja de Noticias; opcional Gráficos y Datos crudos.")

with st.expander("Opciones"):
    movex_win = st.number_input("Ventana MOVEX (días hábiles)", min_value=5, max_value=60, value=20, step=1)
    margen_pct = st.number_input("Margen Compra/Venta sobre FIX (% por lado)", min_value=0.0, max_value=5.0, value=0.5, step=0.1)
    do_charts = st.toggle("Agregar hoja 'Gráficos' (últimos 12)", value=True)
    do_raw    = st.toggle("Agregar hoja 'Datos crudos' (últimos 12)", value=True)

_check_tokens()
_render_sidebar_status()

if st.button("Generar Excel"):
    # 1) Series últimos 6 y FECHAS REALES para encabezados
    def pad6(lst): return ([None]*(6-len(lst)))+lst if len(lst)<6 else lst

    usd6_pairs = sie_last_n(SIE_SERIES["USD_FIX"], n=6)
    fechas6_dt = pad6([parse_any_date(f) for f,_ in usd6_pairs])
    usd6  = pad6([v for _, v in usd6_pairs])

    eur6  = pad6([v for _, v in sie_last_n(SIE_SERIES["EUR_FIX"], n=6)])
    jpy6  = pad6([v for _, v in sie_last_n(SIE_SERIES["JPY_FIX"], n=6)])
    udis6 = pad6([v for _, v in sie_last_n(SIE_SERIES["UDIS"],    n=6)])

    movex6  = rolling_movex_for_last6(window=int(movex_win))
    compra6 = [x*(1 - margen_pct/100.0) if x is not None else None for x in usd6]
    venta6  = [x*(1 + margen_pct/100.0) if x is not None else None for x in usd6]
    eurusd6 = [(e/u if (e is not None and u) else None) for e,u in zip(eur6, usd6)]
    usdjpy6 = [(u/j if (u is not None and j) else None) for u,j in zip(usd6, jpy6)]

    tiie28_6  = pad6([v for _, v in sie_last_n(SIE_SERIES["TIIE_28"], n=6)])
    cetes28_6 = pad6([v for _, v in sie_last_n(SIE_SERIES["CETES_28"], n=6)])

    none6 = [None]*6
    tiie_obj6  = none6 if not SIE_SERIES["TIIE_OBJ"]  else pad6([v for _, v in sie_last_n(SIE_SERIES["TIIE_OBJ"],  n=6)])
    tiie91_6   = none6 if not SIE_SERIES["TIIE_91"]   else pad6([v for _, v in sie_last_n(SIE_SERIES["TIIE_91"],   n=6)])
    tiie182_6  = none6 if not SIE_SERIES["TIIE_182"]  else pad6([v for _, v in sie_last_n(SIE_SERIES["TIIE_182"],  n=6)])
    cetes91_6  = none6 if not SIE_SERIES["CETES_91"]  else pad6([v for _, v in sie_last_n(SIE_SERIES["CETES_91"],  n=6)])
    cetes182_6 = none6 if not SIE_SERIES["CETES_182"] else pad6([v for _, v in sie_last_n(SIE_SERIES["CETES_182"], n=6)])
    cetes364_6 = none6 if not SIE_SERIES["CETES_364"] else pad6([v for _, v in sie_last_n(SIE_SERIES["CETES_364"], n=6)])

    uma = get_uma(INEGI_TOKEN)  # se repite a lo largo de las 6 columnas
    valores = {
        "usd6": usd6, "eur6": eur6, "jpy6": jpy6,
        "eurusd6": eurusd6, "usdjpy6": usdjpy6,
        "udis6": udis6,
        "tiie_obj6": tiie_obj6, "tiie28_6": tiie28_6, "tiie91_6": tiie91_6, "tiie182_6": tiie182_6,
        "cetes28_6": cetes28_6, "cetes91_6": cetes91_6, "cetes182_6": cetes182_6, "cetes364_6": cetes364_6,
        "uma_diaria6": [uma["diaria"]]*6, "uma_mensual6": [uma["mensual"]]*6, "uma_anual6": [uma["anual"]]*6,
    }

    # 2) Noticias (con fallback)
    news = fetch_financial_news(limit_per_feed=8, total_limit=20)

    try:
        # Hoja Indicadores con fechas reales en B2..G2
        wb = crear_hoja_indicadores_layout(valores, movex6, compra6, venta6, fechas6_dt)
        # Hoja Noticias
        add_news_sheet(wb, news)

        # 3) Hojas opcionales (gráficos / datos crudos)
        if do_charts or do_raw:
            usd_last12  = sie_last_n(SIE_SERIES["USD_FIX"], n=12)
            tiie_last12 = sie_last_n(SIE_SERIES["TIIE_28"], n=12)
            fed_last12  = fred_last_n("FEDFUNDS", n=12)
            cpi_last12  = fred_cpi_yoy_series(n=12)

            if do_charts:
                ws3 = wb.create_sheet("Gráficos")
                ws3['A1'] = "Series históricas (últimos 12 datos)"; ws3['A1'].font = Font(bold=True)
                r_usd = write_series_table(ws3, 3, 1, "USD/MXN (FIX)", usd_last12)
                r_tii = write_series_table(ws3, 3, 4, "TIIE 28d (%)", tiie_last12)
                r_fed = write_series_table(ws3, 22,1, "Fed Funds (%)", fed_last12)
                r_cpi = write_series_table(ws3, 22,4, "Inflación EUA YoY (%)", cpi_last12)
                add_line_chart(ws3, "USD/MXN - Últimos 12", r_usd, ("H", 2))
                add_line_chart(ws3, "TIIE 28d - Últimos 12", r_tii, ("H", 18))
                add_line_chart(ws3, "Fed Funds - Últimos 12", r_fed, ("H", 34))
                add_line_chart(ws3, "Inflación EUA YoY - Últimos 12", r_cpi, ("H", 50))

            if do_raw:
                raw = {
                    "USD/MXN (FIX)": usd_last12,
                    "TIIE 28d (%)": tiie_last12,
                    "Fed Funds (%)": fed_last12,
                    "Inflación EUA YoY (%)": cpi_last12,
                }
                add_raw_sheet(wb, raw)

        bio = io.BytesIO(); wb.save(bio)
        st.success("¡Listo! Archivo generado con fechas reales en B2..G2.")
        st.download_button(
            "Descargar Excel",
            data=bio.getvalue(),
            file_name=f"indicadores_{today_cdmx()}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        st.error(f"Ocurrió un error al generar el Excel: {e}")
